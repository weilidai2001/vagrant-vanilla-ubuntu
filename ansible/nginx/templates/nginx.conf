# Resources and server options
# ----------------------------

user {{nginx_user}} {{nginx_group}};
pid {{nginx_pid_file}};

{% if nginx_workers_count is defined %}
worker_processes {{nginx_workers_count}}
{% else %}
worker_processes {{nginx_workers_per_core * ansible_processor_count * ansible_processor_cores}};  # {{nginx_workers_per_core}} per core.
{% endif %}

events {
	worker_connections {{nginx_worker_connections}};

	# Accept as many connections as possible, after nginx
	# gets notification about a new connection.
	# May flood worker_connections, if that option is set too low.
	multi_accept {{'on' if nginx_multi_accept else 'off'}};

{% if ansible_system == 'Linux' %}
	use epoll;
{% endif %}
}

# Override OS' limit values
worker_rlimit_nofile {{nginx_worker_rlimit_nofile}};

http {


# Logging
# -------

	error_log '{{nginx_error_log_file}}' {{nginx_error_log_level|default('')}};

{% for name, format in nginx_log_formats.items() %}
	log_format {{name}} '{{format|replace('\'', '\\\'')}}';
{% endfor %}

	# Send the nginx version number in error pages and server headers.
	server_tokens {{'on' if nginx_server_tokens else 'off'}};
	access_log '{{nginx_access_log_file}}' {{nginx_access_log_format}} {% if nginx_access_log_buffer %}buffer={{nginx_access_log_buffer}}{% endif %};


# Access control
# --------------

{% for rule in nginx_access_control_rules %}
	{{rule}};
{% endfor %}

{% if nginx_blocked_user_agents %}
{% if nginx_blocked_user_agents is string %}
if ($http_user_agent ~* {{nginx_blocked_user_agents}}) {
{% else %}
if ($http_user_agent ~* {{nginx_blocked_user_agents|join('|')}}) {
{% endif %}
	return {{nginx_blocked_user_agents_status_code}};
}
{% endif %}


# Compression
# -----------

	gzip              {{'on' if nginx_gzip else 'off'}};
	gzip_http_version {{nginx_gzip_http_version}};
	gzip_comp_level   {{nginx_gzip_comp_level}};
	gzip_min_length   {{nginx_gzip_min_length}};
	gzip_proxied      {{nginx_gzip_proxied|join(' ')}};
	gzip_vary         {{'on' if nginx_gzip_vary else 'off'}};
	gzip_types        {{nginx_gzip_types|join(' ')}};
	gzip_disable      {{nginx_gzip_disable}};


# MIME
# ----

	include       {{nginx_mimetype_definitions_file}};
	default_type  {{nginx_default_mimetype}};


# SSL
# ---

	ssl_protocols {{nginx_ssl_protocols|join(' ')}};
	ssl_ciphers {{nginx_ssl_ciphers|join(':')}};
	ssl_prefer_server_ciphers {{'on' if nginx_ssl_prefer_server_ciphers else 'off'}};
	ssl_session_cache {{nginx_ssl_session_cache}};
	ssl_session_timeout {{nginx_ssl_session_timeout}};


# Resources and server options
# ----------------------------

	# Caches information about open FDs, freqently accessed files.
	open_file_cache          max={{nginx_open_file_cache_max}} inactive={{nginx_open_file_cache_inactive}};
	open_file_cache_valid    {{nginx_open_file_cache_valid}};
	open_file_cache_min_uses {{nginx_open_file_cache_min_uses}};
	open_file_cache_errors   {{'on' if nginx_open_file_cache_errors else 'off'}};

	# Sendfile copies data between one FD and other
	# from within the kernel. More efficient than read() + write(),
	# since the requires transferring data to and from the user space.
	sendfile {{'on' if nginx_sendfile else 'off'}};

	# Causes nginx to attempt to send its HTTP response head
	# in one packet, instead of using partial frames.
	# This is useful for prepending headers before calling
	# sendfile, or for throughput optimization.
	tcp_nopush {{'on' if nginx_tcp_nopush else 'off'}};

	# Don't buffer data-sends (disable Nagle algorithm).
	# Good for sending frequent small bursts of data in real time.
	tcp_nodelay {{'on' if nginx_tcp_nodelay else 'off'}};

	# Timeout for keep-alive connections.
	# Server will close connections after this time.
	keepalive_timeout {{nginx_keepalive_timeout}};

	# Number of requests a client can make over the keep-alive connection.
	keepalive_requests {{nginx_keepalive_requests}};

	# allow the server to close the connection after a client
	# stops responding. Frees up socket-associated memory.
	reset_timedout_connection {{'on' if nginx_reset_timedout_connection else 'off'}};

	# Send the client a "request timed out" if the body
	# is not loaded by this time.
	client_body_timeout {{nginx_client_body_timeout}};

	# Specifies the maximum accepted body size of a client request, as
	# indicated by the request header Content-Length.
	#
	# If the stated content length is greater than this size, then the
	# client receives the HTTP error code 413 ("Request Entity Too
	# Large"). It should be noted that web browsers do not usually
	# know how to properly display such an HTTP error.
	#
	# Set to 0 to disable.
	client_max_body_size {{nginx_client_max_body_size}};

	# If the client stops reading data, free up the stale
	# client connection after this much time.
	send_timeout {{nginx_send_timeout}};

	server_names_hash_bucket_size {{nginx_server_names_hash_bucket_size}};
	types_hash_max_size           {{nginx_types_hash_max_size}};
	types_hash_bucket_size        {{nginx_types_hash_bucket_size}};


# Include custom directives and enabled sites
# -------------------------------------------

	include {{nginx_additional_conf_dir}}/*.conf;
	include {{nginx_enabled_sites_dir}}/*;

}